{
    "patches": [
        {
            "label": "2025-09-29_16-52-39",
            "content": "@@ -1,843 +0,0 @@\n-%0Aclass Towel:%0A    def __init__(self, color: str, size: str):%0A        self.color: str = color%0A        self.size: str = size%0A        self.wetness: int = 0%0A    %0A    def getMaxWetness(self) -%3E int:%0A        if self.size == %22P%22:%0A            return 10%0A        if self.size == %22M%22:%0A            return 20%0A        if self.size == %22G%22:%0A            return 30%0A        return 0%0A%0A    def dry(self, amount: int) -%3E None:%0A        self.wetness += amount%0A        if self.wetness %3E self.getMaxWetness():%0A            print(%22toalha encharcada%22)%0A            self.wetness = self.getMaxWetness()%0A    %0A    def wringOut(self) -%3E None:%0A        self.wetness = 0%0A    %0A    def isDry(self) -%3E bool:%0A        return self.wetness == 0%0A%0A%0A    def show(self) -%3E None:%0A        print(self)%0A%0A    def __str__(self) -%3E str:%0A        return f%22%7Bself.color%7D %7Bself.size%7D %7Bself.wetness%7D%22%0A    \n",
            "lines": "0"
        },
        {
            "label": "2025-10-05_16-54-45",
            "content": "@@ -0,0 +1,843 @@\n+%0Aclass Towel:%0A    def __init__(self, color: str, size: str):%0A        self.color: str = color%0A        self.size: str = size%0A        self.wetness: int = 0%0A    %0A    def getMaxWetness(self) -%3E int:%0A        if self.size == %22P%22:%0A            return 10%0A        if self.size == %22M%22:%0A            return 20%0A        if self.size == %22G%22:%0A            return 30%0A        return 0%0A%0A    def dry(self, amount: int) -%3E None:%0A        self.wetness += amount%0A        if self.wetness %3E self.getMaxWetness():%0A            print(%22toalha encharcada%22)%0A            self.wetness = self.getMaxWetness()%0A    %0A    def wringOut(self) -%3E None:%0A        self.wetness = 0%0A    %0A    def isDry(self) -%3E bool:%0A        return self.wetness == 0%0A%0A%0A    def show(self) -%3E None:%0A        print(self)%0A%0A    def __str__(self) -%3E str:%0A        return f%22%7Bself.color%7D %7Bself.size%7D %7Bself.wetness%7D%22%0A    \n",
            "lines": "35"
        },
        {
            "label": "2025-10-05_16-57-35",
            "content": "@@ -1,1775 +0,0 @@\n-class Towel:%0A    def __init__(self, color: str, size: str):%0A        self.color: str = color%0A        self.size: str = size%0A        self.wetness: int = 0%0A%0A    def getMaxWetness(self) -%3E int:%0A        return %7B%22P%22: 10, %22M%22: 20, %22G%22: 30%7D.get(self.size, 0)%0A%0A    def dry(self, amount: int) -%3E None:%0A        self.wetness += amount%0A        if self.wetness %3E= self.getMaxWetness():%0A            if self.wetness %3E self.getMaxWetness():%0A                print(%22toalha encharcada%22)%0A            self.wetness = self.getMaxWetness()%0A        elif self.wetness %3E 0:%0A            # Para simular a sa%C3%ADda do teste, nada a imprimir aqui%0A            pass%0A%0A    def wringOut(self) -%3E None:%0A        self.wetness = 0%0A%0A    def isDry(self) -%3E bool:%0A        return self.wetness == 0%0A%0A    def show(self) -%3E None:%0A        print(f%22Cor: %7Bself.color%7D, Tamanho: %7Bself.size%7D, Umidade: %7Bself.wetness%7D%22)%0A%0A%0A# ===========================%0A# C%C3%B3digo simulando os testes%0A# ===========================%0A%0A# Teste 1%0Atowel = Towel(%22azul%22, %22P%22)%0Atowel.show()        # Cor: azul, Tamanho: P, Umidade: 0%0Aprint(%22sim%22 if towel.isDry() else %22nao%22)  # sim%0A%0Atowel.dry(5)%0Atowel.show()        # Cor: azul, Tamanho: P, Umidade: 5%0Aprint(%22sim%22 if towel.isDry() else %22nao%22)  # nao%0A%0Atowel.dry(5)        # toalha encharcada%0Atowel.show()        # Cor: azul, Tamanho: P, Umidade: 10%0A%0Atowel.dry(5)        # toalha encharcada%0Atowel.show()        # Cor: azul, Tamanho: P, Umidade: 10%0A%0Atowel.wringOut()%0Atowel.show()        # Cor: azul, Tamanho: P, Umidade: 0%0A%0A# Teste 2%0Atowel = Towel(%22verde%22, %22G%22)%0Atowel.show()        # Cor: verde, Tamanho: G, Umidade: 0%0A%0Atowel.dry(30)       # toalha encharcada%0Atowel.show()        # Cor: verde, Tamanho: G, Umidade: 30%0A%0Atowel.dry(1)        # toalha encharcada%0Atowel.show()        # Cor: verde, Tamanho: G, Umidade: 30\n",
            "lines": "0"
        },
        {
            "label": "2025-10-05_16-58-43",
            "content": "@@ -0,0 +1,1775 @@\n+class Towel:%0A    def __init__(self, color: str, size: str):%0A        self.color: str = color%0A        self.size: str = size%0A        self.wetness: int = 0%0A%0A    def getMaxWetness(self) -%3E int:%0A        return %7B%22P%22: 10, %22M%22: 20, %22G%22: 30%7D.get(self.size, 0)%0A%0A    def dry(self, amount: int) -%3E None:%0A        self.wetness += amount%0A        if self.wetness %3E= self.getMaxWetness():%0A            if self.wetness %3E self.getMaxWetness():%0A                print(%22toalha encharcada%22)%0A            self.wetness = self.getMaxWetness()%0A        elif self.wetness %3E 0:%0A            # Para simular a sa%C3%ADda do teste, nada a imprimir aqui%0A            pass%0A%0A    def wringOut(self) -%3E None:%0A        self.wetness = 0%0A%0A    def isDry(self) -%3E bool:%0A        return self.wetness == 0%0A%0A    def show(self) -%3E None:%0A        print(f%22Cor: %7Bself.color%7D, Tamanho: %7Bself.size%7D, Umidade: %7Bself.wetness%7D%22)%0A%0A%0A# ===========================%0A# C%C3%B3digo simulando os testes%0A# ===========================%0A%0A# Teste 1%0Atowel = Towel(%22azul%22, %22P%22)%0Atowel.show()        # Cor: azul, Tamanho: P, Umidade: 0%0Aprint(%22sim%22 if towel.isDry() else %22nao%22)  # sim%0A%0Atowel.dry(5)%0Atowel.show()        # Cor: azul, Tamanho: P, Umidade: 5%0Aprint(%22sim%22 if towel.isDry() else %22nao%22)  # nao%0A%0Atowel.dry(5)        # toalha encharcada%0Atowel.show()        # Cor: azul, Tamanho: P, Umidade: 10%0A%0Atowel.dry(5)        # toalha encharcada%0Atowel.show()        # Cor: azul, Tamanho: P, Umidade: 10%0A%0Atowel.wringOut()%0Atowel.show()        # Cor: azul, Tamanho: P, Umidade: 0%0A%0A# Teste 2%0Atowel = Towel(%22verde%22, %22G%22)%0Atowel.show()        # Cor: verde, Tamanho: G, Umidade: 0%0A%0Atowel.dry(30)       # toalha encharcada%0Atowel.show()        # Cor: verde, Tamanho: G, Umidade: 30%0A%0Atowel.dry(1)        # toalha encharcada%0Atowel.show()        # Cor: verde, Tamanho: G, Umidade: 30\n",
            "lines": "60"
        },
        {
            "label": "2025-10-05_18-56-13",
            "content": "@@ -1,1746 +0,0 @@\n-class Towel:%0A    def _init_(self, color: str, size: str):%0A        self.color = color%0A        self.size = size%0A        self.wetness = 0%0A%0A    def dry(self, amount: int):%0A        self.wetness += amount%0A        if self.wetness %3E= self.getMaxWetness():%0A            print(%22toalha encharcada%22)%0A            self.wetness = self.getMaxWetness()%0A%0A    def isDry(self) -%3E bool:%0A        return self.wetness == 0%0A%0A    def wringOut(self):%0A        self.wetness = 0%0A%0A    def getMaxWetness(self) -%3E int:%0A        if self.size == %22P%22:%0A            return 10%0A        elif self.size == %22M%22:%0A            return 20%0A        elif self.size == %22G%22:%0A            return 30%0A        return 0%0A%0A    def _str_(self):%0A        return f%22Cor: %7Bself.color%7D, Tamanho: %7Bself.size%7D, Umidade: %7Bself.wetness%7D%22%0A%0A%0Adef main():%0A    toalha = None%0A    while True:%0A        try:%0A            line = input()%0A        except EOFError:%0A            break%0A%0A        print(f%22$%7Bline%7D%22)%0A        args = line.strip().split()%0A%0A        if not args:%0A            continue%0A%0A        cmd = args%5B0%5D%0A%0A        if cmd == %22end%22:%0A            break%0A        elif cmd == %22criar%22:%0A            color = args%5B1%5D%0A            size = args%5B2%5D%0A            toalha = Towel(color, size)%0A        elif cmd == %22mostrar%22:%0A            if toalha is not None:%0A                print(toalha)%0A        elif cmd == %22seca%22:%0A            if toalha is not None:%0A                print(%22sim%22 if toalha.isDry() else %22nao%22)%0A        elif cmd == %22enxugar%22:%0A            if toalha is not None:%0A                amount = int(args%5B1%5D)%0A                toalha.dry(amount)%0A        elif cmd == %22torcer%22:%0A            if toalha is not None:%0A                toalha.wringOut()%0A        else:%0A            print(%22fail: comando desconhecido%22)%0A%0A%0Aif __name__ == %22_main_%22:%0A    main()\n",
            "lines": "0"
        },
        {
            "label": "2025-10-05_19-52-37",
            "content": "@@ -18,16 +18,14 @@\n def \n-_\n _init_\n-_\n (sel\n@@ -50,37 +50,16 @@\n e: str):\n-  # %E2%9C%85 dois underlines\n %0A       \n@@ -665,43 +665,20 @@\n def \n-_\n _str_\n-_\n (self):\n-  # %E2%9C%85 dois underlines\n %0A   \n@@ -1725,32 +1725,15 @@\n = %22_\n-_\n main_\n-_\n %22:\n-  # %E2%9C%85 corrigido\n %0A   \n",
            "lines": "72"
        },
        {
            "label": "2025-10-05_19-53-00",
            "content": "@@ -53,16 +53,36 @@\n : str): \n+ # %E2%9C%85 dois underlines\n %0A       \n@@ -700,16 +700,35 @@\n self):  \n+# %E2%9C%85 dois underlines\n %0A       \n@@ -1777,16 +1777,30 @@\n ain__%22: \n+ # %E2%9C%85 corrigido\n %0A    mai\n",
            "lines": "72"
        },
        {
            "label": "2025-10-05_19-53-37",
            "content": "class Towel:\n    def __init__(self, color: str, size: str): \n        self.color = color\n        self.size = size\n        self.wetness = 0\n\n    def dry(self, amount: int):\n        self.wetness += amount\n        if self.wetness >= self.getMaxWetness():\n            print(\"toalha encharcada\")\n            self.wetness = self.getMaxWetness()\n\n    def isDry(self) -> bool:\n        return self.wetness == 0\n\n    def wringOut(self):\n        self.wetness = 0\n\n    def getMaxWetness(self) -> int:\n        if self.size == \"P\":\n            return 10\n        elif self.size == \"M\":\n            return 20\n        elif self.size == \"G\":\n            return 30\n        return 0\n\n    def __str__(self):  \n        return f\"Cor: {self.color}, Tamanho: {self.size}, Umidade: {self.wetness}\"\n\n\ndef main():\n    toalha = None\n    while True:\n        try:\n            line = input()\n        except EOFError:\n            break\n\n        print(f\"${line}\")\n        args = line.strip().split()\n\n        if not args:\n            continue\n\n        cmd = args[0]\n\n        if cmd == \"end\":\n            break\n        elif cmd == \"criar\":\n            color = args[1]\n            size = args[2]\n            toalha = Towel(color, size)\n        elif cmd == \"mostrar\":\n            if toalha is not None:\n                print(toalha)\n        elif cmd == \"seca\":\n            if toalha is not None:\n                print(\"sim\" if toalha.isDry() else \"nao\")\n        elif cmd == \"enxugar\":\n            if toalha is not None:\n                amount = int(args[1])\n                toalha.dry(amount)\n        elif cmd == \"torcer\":\n            if toalha is not None:\n                toalha.wringOut()\n        else:\n            print(\"fail: comando desconhecido\")\n\n\nif __name__ == \"__main__\": \n    main()",
            "lines": "72"
        }
    ]
}