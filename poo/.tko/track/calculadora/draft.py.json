{
    "patches": [
        {
            "label": "2025-10-04_19-58-34",
            "content": "@@ -1059,667 +1059,4 @@\n tery\n-%0A    %0Adef main():%0A    battery = 0%0A    display = 0.0%0A%0A    while True:%0A        cmd = input()%0A        if cmd.startswith(%22init%22):%0A            battery = int(cmd.split()%5B1%5D)%0A            display = 0.0%0A            print(f%22$init %7Bbattery%7D%22)%0A        elif cmd == %22show%22:%0A            print(%22$show%22)%0A            print(f%22display = %7Bdisplay:.2f%7D, battery = %7Bbattery%7D%22)%0A        elif cmd.startswith(%22charge%22):%0A            inc = int(cmd.split()%5B1%5D)%0A            battery += inc%0A            print(f%22$charge %7Binc%7D%22)%0A        elif cmd == %22end%22:%0A            print(%22$end%22)%0A            break%0A        else:%0A            print(f%22$unknown command: %7Bcmd%7D%22)%0A%0Aif __name__ == %22__main__%22:%0A    main()\n",
            "lines": "35"
        },
        {
            "label": "2025-10-04_20-10-01",
            "content": "@@ -1397,17 +1397,25 @@\n ttery = \n-0\n+%7Bbattery%7D\n %22)%0A     \n@@ -1478,32 +1478,59 @@\n cmd.split()%5B1%5D)%0A\n+            battery += inc%0A\n             prin\n",
            "lines": "61"
        },
        {
            "label": "2025-10-04_20-23-08",
            "content": "@@ -1193,21 +1193,16 @@\n         \n-init_\n battery \n@@ -1253,71 +1253,8 @@\n 0.0%0A\n-            battery = 0  # sempre inicia com 0, conforme teste%0A\n     \n@@ -1276,21 +1276,16 @@\n %22$init %7B\n-init_\n battery%7D\n@@ -1397,25 +1397,17 @@\n ttery = \n-%7Bbattery%7D\n+0\n %22)%0A     \n@@ -1482,35 +1482,8 @@\n 1%5D)%0A\n-            battery += inc%0A\n     \n",
            "lines": "60"
        },
        {
            "label": "2025-10-04_20-29-00",
            "content": "@@ -1278,16 +1278,54 @@\n ery = 0 \n+ # sempre inicia com 0, conforme teste\n %0A       \n",
            "lines": "62"
        },
        {
            "label": "2025-10-04_20-32-42",
            "content": "@@ -1093,27 +1093,8 @@\n = 0%0A\n-    batteryMax = 0%0A\n     \n@@ -1193,26 +1193,28 @@\n         \n+init_\n battery\n-Max\n  = int(c\n@@ -1282,37 +1282,8 @@\n = 0 \n- # bateria inicia sempre em 0\n %0A   \n@@ -1306,26 +1306,28 @@\n %22$init %7B\n+init_\n battery\n-Max\n %7D%22)%0A    \n@@ -1552,103 +1552,8 @@\n inc%0A\n-            if battery %3E batteryMax:%0A                battery = batteryMax  # limite da bateria%0A\n     \n",
            "lines": "62"
        },
        {
            "label": "2025-10-04_20-43-21",
            "content": "@@ -1,8 +1,1076 @@\n+class Calculadora:%0A    def __init__(self, batteryMax: int):%0A        self.display: float = 0.0%0A        self.battery: int = batteryMax%0A        self.batteryMax: int = batteryMax%0A%0A    def charge(self, increment: int) -%3E None:%0A        self.battery += increment%0A        if self.battery %3E self.batteryMax:%0A            self.battery = self.batteryMax%0A%0A    def sum(self, a: float, b: float) -%3E float:%0A        if self.battery %3C= 0:%0A            print(%22Bateria descarregada! Carregue a bateria.%22)%0A            return 0.0%0A        self.battery -= 1%0A        self.display = a + b%0A        return self.display%0A%0A    def div(self, num: float, den: float) -%3E float:%0A        if self.battery %3C= 0:%0A            print(%22Bateria descarregada! Carregue a bateria.%22)%0A            return 0.0%0A        if den == 0:%0A            print(%22Erro: divis%C3%A3o por zero!%22)%0A            return 0.0%0A        self.battery -= 1%0A        self.display = num / den%0A        return self.display%0A%0A    def get_display(self) -%3E float:%0A        return self.display%0A%0A    def get_battery(self) -%3E int:%0A        return self.battery%0A    %0A\n def main\n",
            "lines": "65"
        },
        {
            "label": "2025-10-04_20-46-30",
            "content": "@@ -1,323 +1,84 @@\n-class Calculadora:%0A    def __init__(self, batteryMax: int):%0A        self.display: float = 0.0%0A        self.battery: int = 0  # inicia em 0, conforme teste%0A        self.batteryMax: int = batteryMax%0A%0A    def charge(self, increment: int) -%3E None:%0A        self.batter\n+def main():%0A    battery = 0%0A    batteryMax = 0%0A    displa\n y \n-+\n = \n-increment%0A        if self.battery %3E self.batteryMax\n+0.0%0A%0A    while True\n :%0A  \n@@ -87,184 +87,56 @@\n     \n- \n-   self.battery = self.batteryMax%0A%0A    def sum(self, a: float, b: float) -%3E float:%0A        if self.battery %3C= 0:%0A            print(%22Bateria descarregada! Carregue a bateria.\n+cmd = input()%0A        if cmd.startswith(%22init\n %22)\n+:\n %0A   \n@@ -148,527 +148,120 @@\n     \n-return 0.0%0A        self.battery -= 1%0A        self.display = a + b%0A        return self.display%0A%0A    def get_display(self) -%3E float:%0A        return self.display%0A%0A    def get_battery(self) -%3E int:%0A        return self.\n+batteryMax = int(cmd.split()%5B1%5D)%0A            display = 0.0%0A            battery = 0  # \n bat\n-t\n er\n-y%0A%0A%0Adef main():%0A    calc: Calculadora %7C None = None  # inicializa como None%0A%0A    while True:%0A        cmd = input()%0A        parts = cmd.split()%0A        if not parts:%0A            continue%0A%0A        if parts%5B0%5D == %22init%22:%0A            batteryMax = int(parts%5B1%5D)%0A            calc = Calculadora(batteryMax)\n+ia inicia sempre em 0\n %0A   \n@@ -307,32 +307,27 @@\n        elif \n-parts%5B0%5D\n+cmd\n  == %22show%22:%0A\n@@ -342,195 +342,21 @@\n     \n-if calc is None:%0A                continue  # ignora comandos show antes de init%0A            print(%22$show%22)%0A            display = calc.get_display()%0A            battery = calc.get_battery(\n+print(%22$show%22\n )%0A  \n@@ -437,28 +437,31 @@\n lif \n-parts%5B0%5D == \n+cmd.startswith(\n %22charge%22\n :%0A  \n@@ -456,16 +456,17 @@\n %22charge%22\n+)\n :%0A      \n@@ -476,209 +476,61 @@\n    i\n-f calc is None:%0A                continue  # ignora charge antes de init%0A            inc = int(parts%5B1%5D)%0A            calc.charge(inc)%0A            print(f%22$charge %7Binc%7D%22)%0A        elif parts%5B0%5D == %22sum%22:%0A\n+nc = int(cmd.split()%5B1%5D)%0A            battery += inc%0A \n     \n@@ -540,304 +540,123 @@\n     \n- \n if \n-calc is None:%0A                continue  # ignora sum antes de init%0A            a = float(parts%5B1%5D)%0A            b = float(parts%5B2%5D)%0A            calc.sum(a, b)%0A            # mostra sem .0 se inteiro%0A            print(f%22$sum %7Bint(a) if a.is_integer() else a:g%7D %7Bint(b) if b.is_integer() else b:g\n+battery %3E batteryMax:%0A                battery = batteryMax  # limite da bateria%0A            print(f%22$charge %7Binc\n %7D%22)%0A\n@@ -672,16 +672,11 @@\n lif \n-parts%5B0%5D\n+cmd\n  == \n@@ -787,17 +787,16 @@\n cmd%7D%22)%0A%0A\n-%0A\n if __nam\n",
            "lines": "29"
        },
        {
            "label": "2025-10-04_20-53-47",
            "content": "@@ -131,16 +131,32 @@\n cia em 0\n+, conforme teste\n %0A       \n@@ -403,12 +403,13 @@\n  -%3E \n-bool\n+float\n :%0A  \n@@ -418,129 +418,92 @@\n     \n-%22%22%22%0A        Retorna True se a opera%C3%A7%C3%A3o foi feita, False se bateria insuficiente%0A        %22%22%22%0A        if self.\n+if self.battery %3C= 0:%0A            print(%22Bateria descarregada! Carregue a \n bat\n-t\n er\n-y %3C= 0:\n+ia.%22)\n %0A   \n@@ -522,13 +522,11 @@\n urn \n-False\n+0.0\n %0A   \n@@ -592,20 +592,28 @@\n  return \n-True\n+self.display\n %0A%0A    de\n@@ -782,16 +782,40 @@\n e = None\n+  # inicializa como None\n %0A%0A    wh\n@@ -1068,25 +1068,24 @@\n tteryMax%7D%22)%0A\n-%0A\n         elif\n@@ -1150,32 +1150,70 @@\n         continue\n+  # ignora comandos show antes de init\n %0A            pri\n@@ -1369,25 +1369,24 @@\n %7Bbattery%7D%22)%0A\n-%0A\n         elif\n@@ -1453,32 +1453,63 @@\n         continue\n+  # ignora charge antes de init\n %0A            inc\n@@ -1590,17 +1590,16 @@\n %7Binc%7D%22)%0A\n-%0A\n         \n@@ -1675,16 +1675,44 @@\n continue\n+  # ignora sum antes de init\n %0A       \n@@ -1783,18 +1783,8 @@\n     \n- success =\n  cal\n@@ -1820,31 +1820,25 @@\n tra \n-comando mesmo se falhou\n+sem .0 se inteiro\n %0A   \n@@ -1937,89 +1937,8 @@\n %7D%22)%0A\n-            if not success:%0A                print(%22fail: bateria insuficiente%22)%0A%0A\n     \n@@ -2009,17 +2009,16 @@\n   break%0A\n-%0A\n         \n",
            "lines": "69"
        },
        {
            "label": "2025-10-04_20-55-11",
            "content": "@@ -624,400 +624,8 @@\n ue%0A%0A\n-    def div(self, num: float, den: float) -%3E str:%0A        %22%22%22%0A        Retorna 'ok' se sucesso, ou mensagem de erro caso div por zero ou bateria insuficiente%0A        %22%22%22%0A        if self.battery %3C= 0:%0A            return %22fail: bateria insuficiente%22%0A        if den == 0:%0A            return %22fail: divis%C3%A3o por zero%22%0A        self.battery -= 1%0A        self.display = num / den%0A        return %22ok%22%0A%0A\n     \n@@ -1701,16 +1701,61 @@\n m(a, b)%0A\n+            # mostra comando mesmo se falhou%0A\n         \n@@ -1930,375 +1930,8 @@\n %22)%0A%0A\n-        elif parts%5B0%5D == %22div%22:%0A            if calc is None:%0A                continue%0A            num = float(parts%5B1%5D)%0A            den = float(parts%5B2%5D)%0A            result = calc.div(num, den)%0A            print(f%22$div %7Bint(num) if num.is_integer() else num:g%7D %7Bint(den) if den.is_integer() else den:g%7D%22)%0A            if result != %22ok%22:%0A                print(result)%0A%0A\n     \n",
            "lines": "78"
        },
        {
            "label": "2025-10-04_20-56-05",
            "content": "@@ -375,36 +375,137 @@\n t, b: float) -%3E \n-str:\n+bool:%0A        %22%22%22%0A        Retorna True se a opera%C3%A7%C3%A3o foi feita, False se bateria insuficiente%0A        %22%22%22\n %0A        if self\n@@ -542,36 +542,13 @@\n urn \n-%22fail: bateria insuficiente%22\n+False\n %0A   \n@@ -606,36 +606,36 @@\n %0A        return \n-%22ok%22\n+True\n %0A%0A    def div(se\n@@ -682,55 +682,85 @@\n     \n-if self.battery %3C= 0:%0A            return %22fail:\n+%22%22%22%0A        Retorna 'ok' se sucesso, ou mensagem de erro caso div por zero ou\n  bat\n@@ -776,16 +776,27 @@\n ficiente\n+%0A        %22%22\n %22%0A      \n@@ -789,32 +789,35 @@\n     %22%22%22%0A        \n+if \n self.battery -= \n@@ -817,63 +817,61 @@\n ery \n--= 1  # bateria sempre gasta, mesmo se divis%C3%A3o inv%C3%A1lida\n+%3C= 0:%0A            return %22fail: bateria insuficiente%22\n %0A   \n@@ -919,17 +919,17 @@\n l: divis\n-a\n+%C3%A3\n o por ze\n@@ -932,16 +932,42 @@\n r zero%22%0A\n+        self.battery -= 1%0A\n         \n@@ -2060,38 +2060,39 @@\n 2%5D)%0A            \n-result\n+success\n  = calc.sum(a, b\n@@ -2203,38 +2203,35 @@\n          if \n-result != %22ok%22\n+not success\n :%0A          \n@@ -2234,38 +2234,60 @@\n           print(\n-result\n+%22fail: bateria insuficiente%22\n )%0A%0A        elif \n",
            "lines": "99"
        },
        {
            "label": "2025-10-04_20-56-42",
            "content": "@@ -118,16 +118,29 @@\n nt = 0  \n+# inicia em 0\n %0A       \n@@ -697,16 +697,65 @@\n y -= 1  \n+# bateria sempre gasta, mesmo se divis%C3%A3o inv%C3%A1lida\n %0A       \n@@ -994,16 +994,17 @@\n attery%0A%0A\n+%0A\n def main\n@@ -2612,16 +2612,17 @@\n cmd%7D%22)%0A%0A\n+%0A\n if __nam\n",
            "lines": "93"
        },
        {
            "label": "2025-10-04_21-01-56",
            "content": "class Calculadora:\n    def __init__(self, batteryMax: int):\n        self.display: float = 0.0\n        self.battery: int = 0  \n        self.batteryMax: int = batteryMax\n\n    def charge(self, increment: int) -> None:\n        self.battery += increment\n        if self.battery > self.batteryMax:\n            self.battery = self.batteryMax\n\n    def sum(self, a: float, b: float) -> str:\n        if self.battery <= 0:\n            return \"fail: bateria insuficiente\"\n        self.battery -= 1\n        self.display = a + b\n        return \"ok\"\n\n    def div(self, num: float, den: float) -> str:\n        if self.battery <= 0:\n            return \"fail: bateria insuficiente\"\n        self.battery -= 1  \n        if den == 0:\n            return \"fail: divisao por zero\"\n        self.display = num / den\n        return \"ok\"\n\n    def get_display(self) -> float:\n        return self.display\n\n    def get_battery(self) -> int:\n        return self.battery\n\ndef main():\n    calc: Calculadora | None = None\n\n    while True:\n        cmd = input()\n        parts = cmd.split()\n        if not parts:\n            continue\n\n        if parts[0] == \"init\":\n            batteryMax = int(parts[1])\n            calc = Calculadora(batteryMax)\n            print(f\"$init {batteryMax}\")\n\n        elif parts[0] == \"show\":\n            if calc is None:\n                continue\n            print(\"$show\")\n            display = calc.get_display()\n            battery = calc.get_battery()\n            print(f\"display = {display:.2f}, battery = {battery}\")\n\n        elif parts[0] == \"charge\":\n            if calc is None:\n                continue\n            inc = int(parts[1])\n            calc.charge(inc)\n            print(f\"$charge {inc}\")\n\n        elif parts[0] == \"sum\":\n            if calc is None:\n                continue\n            a = float(parts[1])\n            b = float(parts[2])\n            result = calc.sum(a, b)\n            print(f\"$sum {int(a) if a.is_integer() else a:g} {int(b) if b.is_integer() else b:g}\")\n            if result != \"ok\":\n                print(result)\n\n        elif parts[0] == \"div\":\n            if calc is None:\n                continue\n            num = float(parts[1])\n            den = float(parts[2])\n            result = calc.div(num, den)\n            print(f\"$div {int(num) if num.is_integer() else num:g} {int(den) if den.is_integer() else den:g}\")\n            if result != \"ok\":\n                print(result)\n\n        elif parts[0] == \"end\":\n            print(\"$end\")\n            break\n\n        else:\n            print(f\"$unknown command: {cmd}\")\n\nif __name__ == \"__main__\":\n    main()",
            "lines": "91"
        }
    ]
}